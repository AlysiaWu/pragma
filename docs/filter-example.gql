input UserAggInput {
  filter: [UserFilter]
  orderBy: OrderByInput
  range: RangeInput
  drop: Int
  take: Int
}

input RangeInput {
  before: ID
  after: ID
}

input UserFilter {
  predicate: UserPredicate!
  and: [UserFilter]
  or: [UserFilter]
  negated: Boolean
}

input UserPredicate {
  username: StringPredicate
  age: IntPredicate
  gender: GenderEnum
  cats: ArrayPredicate
}

input IntPredicate {
  lt: Int
  gt: Int
  eq: Int
  gte: Int
  lte: Int
}

input FloatPredicate {
  lt: Float
  gt: Float
  eq: Float
  gte: Float
  lte: Float
}

input StringPredicate {
  length: IntPredicate
  startsWith: String
  endsWith: String
  regex: String
}

input ArrayPredicate {
  length: IntPredicate
}

input BooleanPredicate = Boolean

input EnumPredicate[E] = E
input UserAggInput {
  filter: [UserFilter]
  orderBy: OrderByInput
  from: Int
  to: Int
}

input UserFilter {
  predicate: UserPredicate!
  and: [UserFilter]
  or: [UserFilter]
  negated: Boolean
}

input UserPredicate {
  username: StringPredicate
  age: IntPredicate
  gender: GenderEnum
  cats: ArrayPredicate
}

input IntAggInput {
  filter: [IntFilter]
  orderBy: OrderByInput
  from: Int
  to: Int
}

input IntFilter {
  predicate: IntPredicate!
  and: [IntFilter]
  or: [IntFilter]
  negated: Boolean
}

input FloatAggInput {
  filter: [FloatFilter]
  orderBy: OrderByInput
  from: Int
  to: Int
}

input FloatFilter {
  predicate: FloatPredicate!
  and: [FloatFilter]
  or: [FloatFilter]
  negated: Boolean
}

input StringAggInput {
  filter: [StringFilter]
  orderBy: OrderByInput
  from: Int
  to: Int
}

input StringFilter {
  predicate: StringPredicate!
  and: [StringFilter]
  or: [StringFilter]
  negated: Boolean
}

input ArrayAggInput {
  filter: [ArrayFilter]
  orderBy: OrderByInput
  from: Int
  to: Int
}

input ArrayFilter {
  predicate: ArrayPredicate!
  and: [ArrayFilter]
  or: [ArrayFilter]
  negated: Boolean
}

input BooleanAggInput {
  filter: [BooleanFilter]
  orderBy: OrderByInput
  from: Int
  to: Int
}

input BooleanFilter {
  predicate: BooleanPredicate!
  and: [BooleanFilter]
  or: [BooleanFilter]
  negated: Boolean
}

input IntPredicate {
  lt: Int
  gt: Int
  eq: Int
  gte: Int
  lte: Int
}

input FloatPredicate {
  lt: Float
  gt: Float
  eq: Float
  gte: Float
  lte: Float
}

input StringPredicate {
  length: IntPredicate
  startsWith: String
  endsWith: String
  pattern: String
  eq: String
}

input ArrayPredicate {
  length: IntPredicate
}

input BooleanPredicate {
  eq: Boolean
}

# Enums have predicates similar to booleans (with `eq`)